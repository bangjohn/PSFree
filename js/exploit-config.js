/**
 * PSFree Exploit Configuration
 * 
 * Konfigurasi parameter exploit yang dapat disesuaikan untuk meningkatkan stabilitas
 * 
 * TODO: Tambahkan fitur untuk menyimpan konfigurasi ke localStorage
 */

const ExploitConfig = {
    // Konfigurasi default
    config: {
        // Parameter race condition
        race: {
            // Nilai num_alias untuk berbagai firmware
            num_alias: {
                // Nilai untuk PS4 FW 8.00
                '8.00': 50,
                // Nilai untuk PS4 FW 9.00 (dioptimalkan)
                '9.00': 35,
                // Nilai default jika firmware tidak dikenali
                'default': 40
            },
            
            // Nilai num_races untuk berbagai firmware
            num_races: {
                '8.00': 100,
                '9.00': 120,
                'default': 100
            },
            
            // Delay dalam milidetik untuk stabilitas
            delay_ms: {
                '8.00': 0,
                '9.00': 15,
                'default': 10
            },
            
            // Jumlah percobaan ulang jika race gagal
            max_retries: {
                '8.00': 1,
                '9.00': 3,
                'default': 2
            },
            
            // Backoff eksponensial untuk retry (dalam ms)
            retry_backoff: {
                '8.00': 0,
                '9.00': 50,
                'default': 25
            }
        },
        
        // Parameter memori
        memory: {
            // Ukuran chunk untuk alokasi memori
            chunk_size: {
                '8.00': 128 * 1024, // 128 KB
                '9.00': 1024 * 1024, // 1 MB
                'default': 512 * 1024 // 512 KB
            }
        },
        
        // Parameter error handling
        error_handling: {
            // Apakah menggunakan deteksi kegagalan dini
            early_failure_detection: true,
            
            // Timeout untuk operasi kritis (dalam ms)
            operation_timeout: {
                '8.00': 5000,
                '9.00': 8000,
                'default': 6000
            },
            
            // Apakah menggunakan mekanisme recovery
            use_recovery: true,
            
            // Apakah menggunakan mode aman (lebih lambat tapi lebih stabil)
            safe_mode: {
                '8.00': false,
                '9.00': true,
                'default': false
            }
        },
        
        // Parameter adaptif
        adaptive: {
            // Apakah menggunakan parameter adaptif
            enabled: true,
            
            // Apakah menyesuaikan parameter berdasarkan hasil sebelumnya
            learn_from_results: true,
            
            // Rentang num_alias untuk adaptasi
            num_alias_range: {
                '8.00': [45, 55],
                '9.00': [30, 40],
                'default': [35, 45]
            },
            
            // Rentang delay untuk adaptasi
            delay_range: {
                '8.00': [0, 5],
                '9.00': [10, 20],
                'default': [5, 15]
            }
        },
        
        // Parameter logging
        logging: {
            // Apakah logging diaktifkan
            enabled: true,
            
            // Apakah log detail diaktifkan
            verbose: true,
            
            // Apakah statistik performa diaktifkan
            performance_stats: true,
            
            // Apakah log dikirim ke remote logger
            remote_logging: true
        }
    },
    
    // Firmware yang terdeteksi
    firmware: null,
    
    // Inisialisasi konfigurasi
    init: function(customConfig = {}) {
        // Gabungkan konfigurasi default dengan konfigurasi kustom
        this.config = this._mergeDeep(this.config, customConfig);
        
        // Deteksi firmware
        this.detectFirmware();
        
        // Load konfigurasi dari localStorage jika ada
        this.loadConfig();
        
        console.log('Exploit Config initialized', {
            firmware: this.firmware,
            config: this.config
        });
        
        return this;
    },
    
    // Deteksi firmware
    detectFirmware: function() {
        const userAgent = navigator.userAgent;
        
        // Deteksi PS4 firmware
        const ps4Match = userAgent.match(/PlayStation 4\/([0-9.]+)/);
        if (ps4Match && ps4Match[1]) {
            this.firmware = {
                console: 'PS4',
                version: ps4Match[1]
            };
            return;
        }
        
        // Deteksi PS5 firmware
        const ps5Match = userAgent.match(/PlayStation 5\/([0-9.]+)/);
        if (ps5Match && ps5Match[1]) {
            this.firmware = {
                console: 'PS5',
                version: ps5Match[1]
            };
            return;
        }
        
        // Jika tidak terdeteksi, gunakan default
        this.firmware = {
            console: 'Unknown',
            version: '0.00'
        };
    },
    
    // Load konfigurasi dari localStorage
    loadConfig: function() {
        try {
            const savedConfig = localStorage.getItem('psfree_exploit_config');
            if (savedConfig) {
                const parsedConfig = JSON.parse(savedConfig);
                this.config = this._mergeDeep(this.config, parsedConfig);
                console.log('Loaded exploit configuration from localStorage');
            }
        } catch (e) {
            console.error('Failed to load configuration from localStorage:', e);
        }
    },
    
    // Simpan konfigurasi ke localStorage
    saveConfig: function() {
        try {
            localStorage.setItem('psfree_exploit_config', JSON.stringify(this.config));
            console.log('Saved exploit configuration to localStorage');
        } catch (e) {
            console.error('Failed to save configuration to localStorage:', e);
        }
    },
    
    // Dapatkan nilai parameter berdasarkan firmware
    getParameter: function(category, parameter) {
        if (!this.config[category] || !this.config[category][parameter]) {
            console.error(`Parameter ${category}.${parameter} not found in config`);
            return null;
        }
        
        const paramValues = this.config[category][parameter];
        
        // Jika parameter bukan objek, kembalikan nilai langsung
        if (typeof paramValues !== 'object' || paramValues === null) {
            return paramValues;
        }
        
        // Jika parameter adalah objek, cari nilai berdasarkan firmware
        const version = this.firmware ? this.firmware.version : '0.00';
        
        // Coba dapatkan nilai untuk firmware spesifik
        if (paramValues[version]) {
            return paramValues[version];
        }
        
        // Jika tidak ada, gunakan nilai default
        return paramValues['default'];
    },
    
    // Dapatkan konfigurasi race condition untuk firmware saat ini
    getRaceConfig: function() {
        return {
            num_alias: this.getParameter('race', 'num_alias'),
            num_races: this.getParameter('race', 'num_races'),
            delay_ms: this.getParameter('race', 'delay_ms'),
            max_retries: this.getParameter('race', 'max_retries'),
            retry_backoff: this.getParameter('race', 'retry_backoff')
        };
    },
    
    // Dapatkan konfigurasi memori untuk firmware saat ini
    getMemoryConfig: function() {
        return {
            chunk_size: this.getParameter('memory', 'chunk_size')
        };
    },
    
    // Dapatkan konfigurasi error handling untuk firmware saat ini
    getErrorHandlingConfig: function() {
        return {
            early_failure_detection: this.getParameter('error_handling', 'early_failure_detection'),
            operation_timeout: this.getParameter('error_handling', 'operation_timeout'),
            use_recovery: this.getParameter('error_handling', 'use_recovery'),
            safe_mode: this.getParameter('error_handling', 'safe_mode')
        };
    },
    
    // Dapatkan konfigurasi adaptif untuk firmware saat ini
    getAdaptiveConfig: function() {
        return {
            enabled: this.getParameter('adaptive', 'enabled'),
            learn_from_results: this.getParameter('adaptive', 'learn_from_results'),
            num_alias_range: this.getParameter('adaptive', 'num_alias_range'),
            delay_range: this.getParameter('adaptive', 'delay_range')
        };
    },
    
    // Dapatkan konfigurasi logging untuk firmware saat ini
    getLoggingConfig: function() {
        return {
            enabled: this.getParameter('logging', 'enabled'),
            verbose: this.getParameter('logging', 'verbose'),
            performance_stats: this.getParameter('logging', 'performance_stats'),
            remote_logging: this.getParameter('logging', 'remote_logging')
        };
    },
    
    // Fungsi helper untuk menggabungkan objek secara deep
    _mergeDeep: function(target, source) {
        const output = Object.assign({}, target);
        
        if (this._isObject(target) && this._isObject(source)) {
            Object.keys(source).forEach(key => {
                if (this._isObject(source[key])) {
                    if (!(key in target)) {
                        Object.assign(output, { [key]: source[key] });
                    } else {
                        output[key] = this._mergeDeep(target[key], source[key]);
                    }
                } else {
                    Object.assign(output, { [key]: source[key] });
                }
            });
        }
        
        return output;
    },
    
    // Fungsi helper untuk memeriksa apakah nilai adalah objek
    _isObject: function(item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    }
};

// Ekspos ke window
window.ExploitConfig = ExploitConfig;
