/**
 * PSFree Enhanced Exploit Logger
 * 
 * Sistem logging komprehensif untuk memantau dan menganalisis stabilitas exploit
 * 
 * TODO: Tambahkan fitur untuk menyimpan log ke file lokal
 */

const ExploitLogger = {
    // Konfigurasi logger
    config: {
        // Apakah logging diaktifkan
        enabled: true,
        // Apakah log detail diaktifkan
        verbose: true,
        // Apakah statistik performa diaktifkan
        performanceStats: true,
        // Apakah log dikirim ke remote logger
        remoteLogging: true,
        // Apakah log disimpan ke localStorage
        persistentLogging: true,
        // Ukuran maksimum log di localStorage
        maxLogSize: 50000,
        // Prefix untuk log di localStorage
        storagePrefix: 'psfree_exploit_log_',
        // Statistik exploit
        stats: {
            attempts: 0,
            successes: 0,
            failures: 0,
            kernelPanics: 0,
            averageTime: 0,
            totalTime: 0,
            startTime: null,
            endTime: null,
            // Statistik per tahap
            stages: {
                init: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                setup: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                double_free_1: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                leak: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                double_free_2: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                rw: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                patch: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 }
            },
            // Statistik parameter
            parameters: {
                num_alias: [],
                num_races: [],
                delay_ms: []
            }
        },
        // Firmware yang terdeteksi
        firmware: null,
        // ID sesi
        sessionId: generateSessionId(),
        // Timestamp mulai
        startTimestamp: new Date().toISOString()
    },

    // Inisialisasi logger
    init: function(customConfig = {}) {
        // Gabungkan konfigurasi default dengan konfigurasi kustom
        this.config = { ...this.config, ...customConfig };

        // Deteksi firmware
        this.detectFirmware();

        // Load statistik dari localStorage jika ada
        this.loadStats();

        // Log inisialisasi
        this.info('Exploit Logger initialized', {
            config: {
                enabled: this.config.enabled,
                verbose: this.config.verbose,
                performanceStats: this.config.performanceStats,
                firmware: this.config.firmware,
                sessionId: this.config.sessionId
            }
        });

        // Tambahkan event listener untuk window unload untuk menyimpan statistik
        window.addEventListener('beforeunload', () => {
            this.saveStats();
        });

        return this;
    },

    // Deteksi firmware
    detectFirmware: function() {
        const userAgent = navigator.userAgent;
        
        // Deteksi PS4 firmware
        const ps4Match = userAgent.match(/PlayStation 4\/([0-9.]+)/);
        if (ps4Match && ps4Match[1]) {
            this.config.firmware = {
                console: 'PS4',
                version: ps4Match[1]
            };
            return;
        }
        
        // Deteksi PS5 firmware
        const ps5Match = userAgent.match(/PlayStation 5\/([0-9.]+)/);
        if (ps5Match && ps5Match[1]) {
            this.config.firmware = {
                console: 'PS5',
                version: ps5Match[1]
            };
            return;
        }
        
        // Jika tidak terdeteksi, gunakan default
        this.config.firmware = {
            console: 'Unknown',
            version: '0.00'
        };
    },

    // Load statistik dari localStorage
    loadStats: function() {
        if (!this.config.persistentLogging) return;
        
        try {
            const savedStats = localStorage.getItem(`${this.config.storagePrefix}stats`);
            if (savedStats) {
                this.config.stats = JSON.parse(savedStats);
                this.info('Loaded exploit statistics from localStorage', {
                    stats: {
                        attempts: this.config.stats.attempts,
                        successes: this.config.stats.successes,
                        failures: this.config.stats.failures,
                        kernelPanics: this.config.stats.kernelPanics
                    }
                });
            }
        } catch (e) {
            this.error('Failed to load statistics from localStorage', { error: e.message });
        }
    },

    // Simpan statistik ke localStorage
    saveStats: function() {
        if (!this.config.persistentLogging) return;
        
        try {
            localStorage.setItem(`${this.config.storagePrefix}stats`, JSON.stringify(this.config.stats));
            this.debug('Saved exploit statistics to localStorage');
        } catch (e) {
            this.error('Failed to save statistics to localStorage', { error: e.message });
        }
    },

    // Mulai sesi exploit baru
    startSession: function(parameters) {
        this.config.stats.attempts++;
        this.config.stats.startTime = performance.now();
        
        // Log parameter yang digunakan
        this.info('Starting exploit session', {
            sessionId: this.config.sessionId,
            parameters: parameters,
            firmware: this.config.firmware,
            attempt: this.config.stats.attempts
        });
        
        // Simpan parameter untuk analisis
        if (parameters) {
            if (parameters.num_alias) this.config.stats.parameters.num_alias.push(parameters.num_alias);
            if (parameters.num_races) this.config.stats.parameters.num_races.push(parameters.num_races);
            if (parameters.delay_ms) this.config.stats.parameters.delay_ms.push(parameters.delay_ms);
        }
    },

    // Akhiri sesi exploit
    endSession: function(success, error = null) {
        this.config.stats.endTime = performance.now();
        const duration = this.config.stats.endTime - this.config.stats.startTime;
        
        // Update statistik
        if (success) {
            this.config.stats.successes++;
            this.info('Exploit session completed successfully', {
                sessionId: this.config.sessionId,
                duration: duration,
                attempt: this.config.stats.attempts
            });
        } else {
            this.config.stats.failures++;
            this.error('Exploit session failed', {
                sessionId: this.config.sessionId,
                duration: duration,
                attempt: this.config.stats.attempts,
                error: error
            });
        }
        
        // Update statistik waktu
        this.config.stats.totalTime += duration;
        this.config.stats.averageTime = this.config.stats.totalTime / this.config.stats.attempts;
        
        // Simpan statistik
        this.saveStats();
    },

    // Mulai tahap exploit
    startStage: function(stage) {
        if (!this.config.stats.stages[stage]) {
            this.config.stats.stages[stage] = { 
                attempts: 0, successes: 0, failures: 0, 
                avgTime: 0, totalTime: 0, startTime: 0 
            };
        }
        
        this.config.stats.stages[stage].attempts++;
        this.config.stats.stages[stage].startTime = performance.now();
        
        this.info(`Starting stage: ${stage}`, {
            stage: stage,
            attempt: this.config.stats.stages[stage].attempts
        });
    },

    // Akhiri tahap exploit
    endStage: function(stage, success, error = null) {
        if (!this.config.stats.stages[stage]) return;
        
        const endTime = performance.now();
        const duration = endTime - this.config.stats.stages[stage].startTime;
        
        // Update statistik
        if (success) {
            this.config.stats.stages[stage].successes++;
            this.info(`Stage completed successfully: ${stage}`, {
                stage: stage,
                duration: duration,
                attempt: this.config.stats.stages[stage].attempts
            });
        } else {
            this.config.stats.stages[stage].failures++;
            this.error(`Stage failed: ${stage}`, {
                stage: stage,
                duration: duration,
                attempt: this.config.stats.stages[stage].attempts,
                error: error
            });
        }
        
        // Update statistik waktu
        this.config.stats.stages[stage].totalTime += duration;
        this.config.stats.stages[stage].avgTime = 
            this.config.stats.stages[stage].totalTime / this.config.stats.stages[stage].attempts;
    },

    // Log kernel panic
    logKernelPanic: function(stage, error = null) {
        this.config.stats.kernelPanics++;
        
        this.error(`Kernel Panic detected at stage: ${stage}`, {
            stage: stage,
            kernelPanics: this.config.stats.kernelPanics,
            error: error
        });
        
        // Simpan statistik
        this.saveStats();
    },

    // Fungsi logging
    debug: function(message, data = {}) {
        if (!this.config.enabled || !this.config.verbose) return;
        this._log('DEBUG', message, data);
    },

    info: function(message, data = {}) {
        if (!this.config.enabled) return;
        this._log('INFO', message, data);
    },

    warn: function(message, data = {}) {
        if (!this.config.enabled) return;
        this._log('WARN', message, data);
    },

    error: function(message, data = {}) {
        if (!this.config.enabled) return;
        this._log('ERROR', message, data);
    },

    // Fungsi logging internal
    _log: function(level, message, data = {}) {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp: timestamp,
            level: level,
            message: message,
            data: data,
            sessionId: this.config.sessionId,
            firmware: this.config.firmware
        };
        
        // Log ke konsol
        console.log(`[${level}] ${message}`, data);
        
        // Kirim ke remote logger jika diaktifkan
        if (this.config.remoteLogging && window.RemoteLogger) {
            switch (level) {
                case 'DEBUG':
                    window.RemoteLogger.debug(message, data);
                    break;
                case 'INFO':
                    window.RemoteLogger.info(message, data);
                    break;
                case 'WARN':
                    window.RemoteLogger.warn(message, data);
                    break;
                case 'ERROR':
                    window.RemoteLogger.error(message, data);
                    break;
            }
        }
        
        // Simpan ke localStorage jika diaktifkan
        if (this.config.persistentLogging) {
            this._saveLogToStorage(logEntry);
        }
    },

    // Simpan log ke localStorage
    _saveLogToStorage: function(logEntry) {
        try {
            // Ambil log yang sudah ada
            let logs = localStorage.getItem(`${this.config.storagePrefix}logs`);
            logs = logs ? JSON.parse(logs) : [];
            
            // Tambahkan log baru
            logs.push(logEntry);
            
            // Batasi ukuran log
            if (logs.length > this.config.maxLogSize) {
                logs = logs.slice(-this.config.maxLogSize);
            }
            
            // Simpan kembali
            localStorage.setItem(`${this.config.storagePrefix}logs`, JSON.stringify(logs));
        } catch (e) {
            console.error('Failed to save log to localStorage:', e);
        }
    },

    // Dapatkan statistik exploit
    getStats: function() {
        return this.config.stats;
    },

    // Dapatkan log dari localStorage
    getLogs: function() {
        if (!this.config.persistentLogging) return [];
        
        try {
            const logs = localStorage.getItem(`${this.config.storagePrefix}logs`);
            return logs ? JSON.parse(logs) : [];
        } catch (e) {
            console.error('Failed to get logs from localStorage:', e);
            return [];
        }
    },

    // Hapus semua log dan statistik
    clearAll: function() {
        if (!this.config.persistentLogging) return;
        
        try {
            localStorage.removeItem(`${this.config.storagePrefix}logs`);
            localStorage.removeItem(`${this.config.storagePrefix}stats`);
            
            // Reset statistik
            this.config.stats = {
                attempts: 0,
                successes: 0,
                failures: 0,
                kernelPanics: 0,
                averageTime: 0,
                totalTime: 0,
                startTime: null,
                endTime: null,
                stages: {
                    init: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    setup: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    double_free_1: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    leak: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    double_free_2: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    rw: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 },
                    patch: { attempts: 0, successes: 0, failures: 0, avgTime: 0, totalTime: 0 }
                },
                parameters: {
                    num_alias: [],
                    num_races: [],
                    delay_ms: []
                }
            };
            
            this.info('Cleared all logs and statistics');
        } catch (e) {
            console.error('Failed to clear logs and statistics:', e);
        }
    }
};

// Fungsi untuk menghasilkan ID sesi unik
function generateSessionId() {
    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, () => {
        const r = Math.random() * 16 | 0;
        return r.toString(16);
    });
}

// Ekspos ke window
window.ExploitLogger = ExploitLogger;
